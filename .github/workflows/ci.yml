name: CI
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      avalanchegoRepo:
        description: 'avalanchego github repository'
        required: true
        default: 'ava-labs/avalanchego'
      avalanchegoBranch:
        description: 'avalanchego branch'
        required: true
        default: 'master'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: check out ${{ github.event.inputs.avalanchegoRepo }} ${{ github.event.inputs.avalanchegoBranch }}
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.avalanchegoRepo }}
          ref: ${{ github.event.inputs.avalanchegoBranch }}
          path: avalanchego
          token: ${{ secrets.AVALANCHE_PAT }}
      - uses: actions/setup-go@v5
        with:
          go-version: '~1.21.9'
          check-latest: true
      - name: change avalanchego dep
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          go mod edit -replace github.com/ava-labs/avalanchego=./avalanchego
          go mod tidy
          go clean -modcache # avoid conflicts with the golangci-lint-action cache
      - run: ./scripts/lint_allowed_geth_imports.sh
        shell: bash
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.56
          working-directory: .
          args: --timeout 3m
          skip-pkg-cache: true
      - name: Run shellcheck
        shell: bash
        run: scripts/shellcheck.sh
  test:
    name: Golang Unit Tests v${{ matrix.go }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-20.04, ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - name: check out ${{ github.event.inputs.avalanchegoRepo }} ${{ github.event.inputs.avalanchegoBranch }}
      if: ${{ github.event_name == 'workflow_dispatch' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.avalanchegoRepo }}
        ref: ${{ github.event.inputs.avalanchegoBranch }}
        path: avalanchego
        token: ${{ secrets.AVALANCHE_PAT }}
    - uses: actions/setup-go@v5
      with:
        go-version: '~1.21.9'
        check-latest: true
    - name: change avalanchego dep
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        go mod edit -replace github.com/ava-labs/avalanchego=./avalanchego
        go mod tidy
    - name: Set timeout on Windows # Windows UT run slower and need a longer timeout
      shell: bash
      if: matrix.os == 'windows-latest'
      run: echo "TIMEOUT=1200s" >> $GITHUB_ENV
    - run: go mod download
      shell: bash
    - run: ./scripts/build.sh evm
      shell: bash
    - run: ./scripts/build_test.sh
      shell: bash
      env:
        TIMEOUT: ${{ env.TIMEOUT }}
    - run: ./scripts/coverage.sh
      shell: bash
  avalanchego_e2e:
    name: AvalancheGo E2E Tests v${{ matrix.go }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
    steps:
    - uses: actions/checkout@v4
    - name: check out ${{ github.event.inputs.avalanchegoRepo }} ${{ github.event.inputs.avalanchegoBranch }}
      if: ${{ github.event_name == 'workflow_dispatch' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.avalanchegoRepo }}
        ref: ${{ github.event.inputs.avalanchegoBranch }}
        path: avalanchego
        token: ${{ secrets.AVALANCHE_PAT }}
    - uses: actions/setup-go@v5
      with:
        go-version: '~1.21.9'
        check-latest: true
    - name: Run e2e tests
      run: E2E_SERIAL=1 ./scripts/tests.e2e.sh
      shell: bash
    - name: Upload tmpnet network dir
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: tmpnet-data
        path: ~/.tmpnet/networks/1000
            - name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v4.0.1
  with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # optional
    # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
    dotnet-quality: # optional
    # Optional global.json location, if your global.json isn't located in the root of the repo.
    global-json-file: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Optional input to enable caching of the NuGet global-packages folder
    cache: # optional
    # Used to specify the path to a dependency file: packages.lock.json. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
                - name: Setup Node.js environment
  uses: actions/setup-node@v4.0.3
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
    
                      - name: Upload a Build Artifact
  uses: actions/upload-artifact@v4.3.6
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.

    compression-level: # optional, default is 6
    # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.

    overwrite: # optional, default is false
                - name: CN Terragrunt GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: CloudNation-nl/cn-terragrunt-github-actions@157d7b2ada26510a0f7ea0180af89bc2cf9305e4
  uses: CloudNation-nl/cn-terragrunt-github-actions@v0.0.16
  with:
    # Terraform or Terragrunt subcommand to execute.
    tf_actions_subcommand: 
    # Binary to use. Terraform or Terragrunt
    tf_actions_binary: # optional, default is terragrunt
    # Terraform version to install.
    tf_actions_version: # default is latest
    # Terragrunt version to install.
    tg_actions_version: # default is latest
    # Hostname for the CLI credentials file.
    tf_actions_cli_credentials_hostname: # optional, default is app.terraform.io
    # Token for the CLI credentials file.
    tf_actions_cli_credentials_token: # optional
    # Whether or not to comment on pull requests.
    tf_actions_comment: # optional, default is true
    # Terragrunt working directory.
    tf_actions_working_dir: # optional, default is .
    # Write Terragrunt fmt changes to source files.
    tf_actions_fmt_write: # optional
          on:
  push:
    branches:
    - main
    - release/*
    on:
  pull_request:
    branches:
    - main
    on:
  schedule:
  - cron: "0 2 * * 1-5"
  on:
  workflow_dispatch:
  - name: Setup Node
  uses: actions/setup-node@v4
  with:
    node-version: '20.x'
  
          - name: Install Dependencies
  run: npm install
  jobs:
  test:
    name: Test on node ${{ matrix.node_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node_version: ['18.x', '20.x']
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node_version }}

    - name: npm install, build and test
      run: |
        npm install
        npm run build --if-present
        npm test
        steps:
- run: npm publish
  if: github.event_name == 'push'
        
  
          
